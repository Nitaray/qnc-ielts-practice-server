type Query {
	allTests:			[Test!]!
	test(id: Int!):		Test
	user(id: Int!):		User
}

type Mutation {
	signup(user: UserInput!): 						AuthPayload
	login(username: String!, password: String!):    AuthPayload
	createComment(comment: CommentInput):			Comment!	
	deleteComment(commentId: Int!):                 Comment!
	addTest(test: TestInput!):                      Test!
	changeName(newName: String!):                   User! 
} 

type AuthPayload {
	token:              String!
	user:               User!
}

type User {
	id:                 Int!
	username:           String!
	fullname:           String
	role:               Role
	rating:             Int!
	comments:           [Comment!]
	doneTests:          [Test!]
}

input UserInput {
	username: 			String!
	password:			String!
	name:				String
}

fragment personalInfo on User {
	fullname
}

type Role {
	id:                 Int!
	name:               String!
}

type Test {
	id:                 Int!
	title:				String!
	type:               String!
	sections:           [TestSection!]!
	comments:           [Comment!]
}

input TestInput {
	title:				String!
	type:				String!
}

type TestSection {
	id:                 Int!
	order:				Int!
	type:               String!
	statementText:      String
	statementAudio:     String
	questionList:       [QuestionGroup!]!
}

type Question {
	id:                 Int!
	order:				Int!
	type:               String!
	statementText:      String!
	answers:            [Answer!]
}

type QuestionGroup {
	id:                 Int!
	order:				Int!
	introText:          String!
	questions:          [Question!]!
}

type Answer {
	id:                 Int!
	text:               String!
}

type Comment {
	id:                 Int!
	user:               User!
	content:            String!
	created:            String!
}

input CommentInput {
	content:			String!
	testId:				String!
	userId:				String!
}