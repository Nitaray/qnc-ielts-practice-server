generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATASOURCE_URL")
}

model Answer {
  AnswerId         Int                @id @default(autoincrement())
  AnswerText       String
  AnswerHistory    AnswerHistory[]
  AnswerOfQuestion AnswerOfQuestion[]
}

model AnswerHistory {
  UserId       Int
  QuestionId   Int
  UserAnswerId Int
  Question     Question @relation(fields: [QuestionId], references: [QuestionId])
  Answer       Answer   @relation(fields: [UserAnswerId], references: [AnswerId])
  User         User     @relation(fields: [UserId], references: [UserId])

  @@id([UserId, QuestionId])
}

model AnswerOfQuestion {
  AnswerId   Int
  QuestionId Int
  IsCorrect  Boolean
  Answer     Answer   @relation(fields: [AnswerId], references: [AnswerId])
  Question   Question @relation(fields: [QuestionId], references: [QuestionId])

  @@id([AnswerId, QuestionId])
}

model Comment {
  CommentId       Int      @id @default(autoincrement())
  Content         String
  DateCreated     DateTime @default(now()) @db.Date
  CommentedUserId Int
  InTestId        Int
  User            User     @relation(fields: [CommentedUserId], references: [UserId])
  Test            Test     @relation(fields: [InTestId], references: [TestId])
}

model HasDone {
  UserId      Int
  TestId      Int
  StartTime   DateTime @default(now()) @db.Timestamp(6)
  ScoreResult Float?   @default(0)
  Test        Test     @relation(fields: [TestId], references: [TestId])
  User        User     @relation(fields: [UserId], references: [UserId])

  @@id([UserId, TestId])
}

model Question {
  QuestionId       Int                @id @default(autoincrement())
  QuestionType     String
  Statement        String
  AnswerHistory    AnswerHistory[]
  AnswerOfQuestion AnswerOfQuestion[]
  QuestionInGroup  QuestionInGroup[]
}

model QuestionGroup {
  QuestionGroupId Int               @id @default(autoincrement())
  IntroText       String
  TestSectionId   Int
  TestSection     TestSection       @relation(fields: [TestSectionId], references: [TestSectionId])
  QuestionInGroup QuestionInGroup[]
}

model QuestionInGroup {
  QuestionGroupId   Int
  QuestionId        Int
  QuestionNumbering Int
  QuestionGroup     QuestionGroup @relation(fields: [QuestionGroupId], references: [QuestionGroupId])
  Question          Question      @relation(fields: [QuestionId], references: [QuestionId])

  @@id([QuestionGroupId, QuestionId])
}

model Role {
  RoleId   Int    @id @default(autoincrement())
  RoleName String
  User     User[]
}

model Test {
  TestId      Int           @id @default(autoincrement())
  TestType    String
  Title       String        @unique
  Comment     Comment[]
  HasDone     HasDone[]
  TestSection TestSection[]
}

model TestSection {
  TestSectionId   Int             @id @default(autoincrement())
  TestSectionType String
  StatementText   String?
  TestId          Int
  StatementAudio  String?
  Test            Test            @relation(fields: [TestId], references: [TestId])
  QuestionGroup   QuestionGroup[]
}

model User {
  UserId        Int             @id @default(autoincrement())
  Username      String          @unique
  Fullname      String
  Password      String
  Rating        Int
  RoleId        Int
  RefreshToken  String?         @unique @db.Uuid
  Role          Role            @relation(fields: [RoleId], references: [RoleId])
  AnswerHistory AnswerHistory[]
  Comment       Comment[]
  HasDone       HasDone[]
}
