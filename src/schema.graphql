type Query {
	allTests:		[Test!]!
	test(id: int!):	Test
	user(id: int!):	User
}

type Mutation {
	signup(username: String!, password: String!, name: String): 	AuthPayload
	login(username: String!, password: String!):                	AuthPayload
	createComment(content: String!, testId: int!, userId: int!):	QResult!	
	deleteComment(commentId: int!):                             	QResult!
	addTest(test: Test!):                                       	QResult!
	changeName(newName: String!):                               	QResult! 
} 

type QResult {
	success:	Boolean!
	message:	String!
}

type AuthPayload {
	token:              String
	user:               User
}

type User {
	id:                 int!
	username:           String!
	fullname:           String
	role:               Role
	rating:             int!
	comments:           [Comment!]
	doneTests:          [Test!]
}

fragment personalInfo on User {
	fullname
}

type Role {
	id:                 int!
	name:               String!
}

type Test {
	id:                 int!
	title:				String!
	type:               String!
	sections:           [TestSection!]!
	comments:           [Comment!]
}

type TestSection {
	id:                 int!
	order:				int!
	type:               String!
	statementText:      String
	statementAudio:     String
	questionList:       [QuestionGroup!]!
}

type Question {
	id:                 int!
	order:				int!
	type:               String!
	statementText:      String!
	answers:            [Answer!]
}

type QuestionGroup {
	id:                 int!
	order:				int!
	introText:          String!
	questions:          [Question!]!
}

type Answer {
	id:                 int!
	text:               String!
}

type Comment {
	id:                 int!
	user:               User!
	content:            String!
	created:            String!
}
