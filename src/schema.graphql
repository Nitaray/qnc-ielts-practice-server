type Query {
	allUsers:										[User!]!
	getUserById(id: Int!):							User

	allTests:										[Test!]!
	getTestById(id: Int!):							Test!
	getTestResult(userId: Int!, testId: Int!): 		TestResult
}

type Mutation {
	signup(user: UserInput!): 						AuthPayload!
	login(username: String!, password: String!):	AuthPayload!

	refreshJWT:										AuthPayload!

	createComment(comment: CommentInput!):			Comment!	
	deleteComment(commentId: Int!):					Comment!

	addTest(test: TestInput!):						Test!
	addTestSection(section: TestSectionInput!):		TestSection!
	addQuestionGroup(group: QuestionGroupInput!):	QuestionGroup!
	addQuestion(question: QuestionInput!):			Question!
	addAnswer(answer: AnswerInput!):				Answer!

	startTest(testId: Int!, userId: Int!):			Test!
	submitTest(testSubmission: TestSubmission!):	TestResult!

	changeName(userId: Int!, newName: String!):		User!
}

type AuthPayload {
	token:				String!
	user:				User!
}

type User {
	id:					Int!
	username:			String!
	fullname:			String
	role:				Role
	rating:				Int!
	comments:			[Comment!]
	doneTests:			[Test!]
}

input UserInput {
	username:			String!
	password:			String!
	name:				String
}

fragment personalInfo on User {
	fullname
}

type Role {
	id:					Int!
	name:				String!
}

type Test {
	id:					Int!
	title:				String!
	type:				String!
	sections:			[TestSection!]!
	comments:			[Comment!]
}

input TestInput {
	title:				String!
	type:				String!
}

input TestSubmission {
	testId:				Int!
	answers:			[QuestionAnswerInput!]!
}

type TestResult {
	test:				Test!
	score:				Float!
	answerHistory:		[AnsweredQuestion!]!
}

type TestSection {
	id:					Int!
	order:				Int!
	type:				String!
	statementText:		String
	statementAudio:		String
	questionGroups:		[QuestionGroup!]!
}

input TestSectionInput {
	testId:				Int!
	type:				String!
	text:				String!
	audio:				String
}

type Question {
	id:					Int!
	order:				Int!
	type:				String!
	statementText:		String!
	answers:			[Answer!]
	trueAnswer:			[Answer!]
}

input QuestionInput {
	questionGroupId:	Int!
	type:				String!
	statementText:		String!
}

type QuestionGroup {
	id:					Int!
	order:				Int!
	introText:			String!
	questions:			[Question!]!
}

input QuestionGroupInput {
	sectionId:			Int!
	introText:			String!
}

input QuestionAnswerInput {			
	questionId:			Int!
	answerId:			Int				# Use if is multiple choice or TF
	answerString:		String			# Use if FiTB
}

type AnsweredQuestion {
	question:			Question!
	answer:				Answer
}

type Answer {
	id:					Int!
	text:				String!
}

input AnswerInput {
	questionId:			Int!
	text:				String!
	isCorrect:			Boolean!
}

type Comment {
	id:					Int!
	user:				User!
	test:				Test!
	content:			String!
	created:			String!
}

input CommentInput {
	content:			String!
	testId:				Int!
	userId:				Int!
}